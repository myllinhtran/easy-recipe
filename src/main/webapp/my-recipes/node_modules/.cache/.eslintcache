[{"/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/index.js":"1","/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/reportWebVitals.js":"2","/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/App.js":"3","/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/components/Homepage.js":"4","/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NavigationBar.js":"5","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/index.js":"6","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/App.js":"7","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/Homepage.js":"8","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NavigationBar.js":"9","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/util/Difficulty.js":"10","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/util/Unit.js":"11","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/util/Meal.js":"12","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeNew.js":"13","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeDetail.js":"14","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeUpdate.js":"15","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/IngredientNew.js":"16"},{"size":225,"mtime":1614904324293,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1614787439100,"results":"19","hashOfConfig":"18"},{"size":729,"mtime":1617874897712,"results":"20","hashOfConfig":"18"},{"size":2957,"mtime":1615196912781,"results":"21","hashOfConfig":"18"},{"size":340,"mtime":1615114317774,"results":"22","hashOfConfig":"18"},{"size":225,"mtime":1618149809228,"results":"23","hashOfConfig":"24"},{"size":1037,"mtime":1619171732981,"results":"25","hashOfConfig":"24"},{"size":3033,"mtime":1619187810917,"results":"26","hashOfConfig":"24"},{"size":470,"mtime":1618500859437,"results":"27","hashOfConfig":"24"},{"size":92,"mtime":1618149809227,"results":"28","hashOfConfig":"24"},{"size":90,"mtime":1618149809228,"results":"29","hashOfConfig":"24"},{"size":111,"mtime":1618149809227,"results":"30","hashOfConfig":"24"},{"size":9496,"mtime":1619171759157,"results":"31","hashOfConfig":"24"},{"size":4268,"mtime":1619187878506,"results":"32","hashOfConfig":"24"},{"size":9586,"mtime":1619188171286,"results":"33","hashOfConfig":"24"},{"size":2264,"mtime":1619187682797,"results":"34","hashOfConfig":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"jphy04",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"71frul",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/index.js",[],["71","72"],"/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/reportWebVitals.js",[],"/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/App.js",[],"/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/components/Homepage.js",[],"/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NavigationBar.js",[],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/index.js",[],["73","74"],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/App.js",[],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/Homepage.js",[],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NavigationBar.js",[],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/util/Difficulty.js",[],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/util/Unit.js",[],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/util/Meal.js",[],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeNew.js",[],"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeDetail.js",["75"],"import React, {useEffect, useState} from \"react\";\nimport Baked from \"./img/lm4rceme60edquisbnwb.jpeg\";\nimport {useParams, useHistory} from \"react-router-dom\";\nimport './css/RecipeDetail.css';\nimport axios from \"axios\";\n\n\nfunction RecipeDetail() {\n\n    const recipeIngredient = {\n        recipeIngredientId: {\n            ingredientId: '',\n            recipeId: ''\n        },\n        amount: '',\n        unit: '',\n    };\n    const recipe = {\n        id: '',\n        title: '',\n        meal: '',\n        difficulty: '',\n        recipeIngredients: [recipeIngredient],\n        steps: ''\n    };\n    const recipeId = useParams();\n    const [recipeState, setRecipeState] = useState(recipe);\n    const [ingredients, setIngredients] = useState([]);\n\n    const history = useHistory();\n\n\n    useEffect(() => {\n        axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/recipes/\" + recipeId.id)\n            .then(response => {\n                if (response.data != null) {\n                    console.log(response.data);\n                    setRecipeState({\n                        title: response.data.title,\n                        meal: response.data.meal,\n                        difficulty: response.data.difficulty,\n                        steps: response.data.steps\n                    });\n                    setIngredients(response.data.ingredientSet);\n                }\n            }).catch(error => console.log(error));\n    }, []);\n\n    const displaySteps = () => {\n        const steps = recipeState.steps;\n        return steps.split('\\n').map((str, index) => <p key={index} className={\"steps\"}>{str}</p>);\n    };\n\n    const handleEdit = (event) => {\n        event.preventDefault();\n        history.push(\"/recipe/update/\" + recipeId.id);\n    };\n\n    const handleDelete = (event) => {\n        event.preventDefault();\n\n        if (window.confirm(\"Do you wish to delete this recipe?\")) {\n            axios.delete(\"https://infinite-caverns-36724.herokuapp.com/api/recipes/\" + recipeId.id)\n                .then(response => {\n                    console.log(response.data);\n                })\n                .then(history.push(\"/\"))\n                .catch(error => console.log(error));\n        }\n        window.location.reload();\n    };\n\n\n    return (\n        <div className={\"container\"} style={{marginTop: \"60px\", marginBottom: \"60px\", width: \"80%\"}}>\n            <div className={\"row\"}>\n                <div className={\"col-4\"}>\n                    <img className={\"img-fluid\"} src={Baked} alt={\"...\"}/>\n                    <div className={\"col\"}>\n                        <br/>\n                        <h5>Ingredients</h5>\n                        <ul>\n                            {ingredients.map((ingredient, index) => {\n                                return (\n                                    <li key={index}>\n                                        {ingredient.name} ({ingredient.amount} {ingredient.unit})\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                </div>\n                <div className={\"col-8\"}>\n                    <h3 style={{fontWeight: \"600\"}}>{recipeState.title}</h3>\n                    <div className={\"row\"}>\n                        <div className={\"col\"}>\n                            <h6>Meal: {recipeState.meal} </h6>\n                        </div>\n                        <div className={\"col\"}>\n                            <h6>Difficulty: {recipeState.difficulty} </h6>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className={\"col\"}>\n                        <h5>Steps: </h5>\n                        {displaySteps()}\n                    </div>\n                    <div className={\"row justify-content-start\"}>\n                        <div className={\"col-2\"}>\n                            <button onClick={handleEdit}>Edit</button>\n                        </div>\n                        <div className={\"col-3\"}>\n                            <button onClick={handleDelete}>Delete</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RecipeDetail;","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeUpdate.js",["76","77"],"import React, {useEffect, useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport {useParams, useHistory} from \"react-router-dom\";\nimport './css/RecipeUpdate.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\n\n\nfunction RecipeUpdate() {\n\n    const recipe = {\n        title: '',\n        meal: '',\n        difficulty: '',\n        steps: '',\n        ingredientSet: ''\n    };\n    const recipeId = useParams();\n    const ingredient = {id: '', name: ''};\n\n    const [currentRecipe, setCurrentRecipe] = useState(recipe);\n\n    const [ingredientId, setIngredientId] = useState(0);\n    const [ingredientName, setIngredientName] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [unit, setUnit] = useState('');\n    const [ingredients, setIngredients] = useState([ingredient]);\n    const [ingredientList, setIngredientList] = useState([]);\n\n    const {register, handleSubmit, errors} = useForm();\n    const history = useHistory();\n\n    useEffect(() => {\n        axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/recipes/\" + recipeId.id)\n            .then(response => {\n                console.log(response.data);\n                setCurrentRecipe({\n                    title: response.data.title,\n                    meal: response.data.meal,\n                    difficulty: response.data.difficulty,\n                    steps: response.data.steps,\n                });\n                setIngredientList(response.data.ingredientSet);\n            }).catch(error => console.log(error));\n\n        axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\")\n            .then(response => {\n                setIngredients(response.data)\n            })\n            .catch(error => console.log(error));\n    }, []);\n\n    const onSubmit = (data) => {\n        const recipe = {\n            id: recipeId.id,\n            title: data.title,\n            meal: data.meal,\n            difficulty: data.difficulty,\n            steps: data.steps,\n            ingredientSet: ingredientList\n        };\n        axios.put(\"https://infinite-caverns-36724.herokuapp.com/api/recipes/\" + recipeId.id, recipe)\n            .then(response => {\n                console.log(response.data);\n            }).catch(error => console.log(error));\n        // alert(\"Your recipe has been updated\");\n    };\n\n    const handleOnChangeIngredient = (event) => {\n        event.preventDefault();\n        const name = event.target.value;\n        setIngredientName(name);\n        let ingredient = ingredients.find((ingredient) => ingredient.name === name);\n        setIngredientId(ingredient.id);\n    };\n\n    const handleIngredientList = (event) => {\n        event.preventDefault();\n\n        const ingredientDetail = {\n            'id': ingredientId,\n            'name': ingredientName,\n            'amount': amount,\n            'unit': unit\n        };\n\n        if (ingredientId !== 0 && ingredientName !== \"\" && amount !== 0 && unit !== \"\") {\n            if (ingredientList.some(ingredient => ingredient.name === ingredientDetail.name)) {\n                alert(\"Ingredient already exists!\");\n            } else {\n                console.log(ingredientDetail);\n                return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n            }\n        }\n    };\n\n    const handleRemoveIngredientItem = (event) => {\n        event.preventDefault();\n        let array = [...ingredientList];\n        let index = array.indexOf(event.target.value);\n        array.splice(index, 1);\n        setIngredientList(array);\n    };\n\n    return (\n        <form className={\"form-recipe\"} onSubmit={handleSubmit(onSubmit)}>\n\n            <label htmlFor={\"title\"}>Title</label>\n            <input className={\"form-control\"} name={\"title\"} type={\"text\"} defaultValue={currentRecipe.title}\n                   ref={register({\n                       required: {value: true, message: \"* Title is required\"},\n                       minLength: {value: 5, message: \"* Title is too short\"},\n                       maxLength: {value: 100, message: \"* Title exceeds the maximum characters\"}\n                   })}/>\n            {errors.title && <p>{errors.title.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"meal\"}>Meal</label>\n                    <select className={\"form-select\"} name={\"meal\"} defaultValue={currentRecipe.meal}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Meal is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {meals.map((meal, index) => {\n                            return (<option key={index}>{meal}</option>)\n                        })}\n                    </select>\n                    {errors.meal && <p>{errors.meal.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"difficulty\"}>Difficulty</label>\n                    <select className={\"form-select\"} name={\"difficulty\"} defaultValue={currentRecipe.difficulty}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Difficulty is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {difficulties.map((difficulty, index) => {\n                            return (<option key={index}>{difficulty}</option>)\n                        })}\n                    </select>\n                    {errors.difficulty && <p>{errors.difficulty.message}</p>}\n                </div>\n            </div>\n\n            <label htmlFor={\"ingredients\"}>Ingredients</label>\n            <select className={\"form-select\"} name={\"ingredients\"} defaultValue={\"Select...\"}\n                    onChange={handleOnChangeIngredient}\n                    ref={register}>\n                <option value={\"Select...\"} disabled>Select...</option>\n                {ingredients.map(ingredient => {\n                    return (<option key={ingredient.id} value={ingredient.name}>{ingredient.name}</option>)\n                })}\n            </select>\n            {errors.ingredients && <p>{errors.ingredients.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"amount\"}>Amount</label>\n                    <input className={\"form-control\"} name={\"amount\"} type={\"number\"}\n                           onChange={e => setAmount(e.target.value)}\n                           ref={register}/>\n                    {errors.amount && <p>{errors.amount.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"unit\"}>Unit</label>\n                    <select className={\"form-select\"} name={\"unit\"} defaultValue={\"Select...\"}\n                            onChange={e => setUnit(e.target.value)}\n                            ref={register}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {units.map((unit, index) => {\n                            return (<option key={index}>{unit}</option>)\n                        })}\n                    </select>\n                    {errors.unit && <p>{errors.unit.message}</p>}\n                </div>\n            </div>\n\n            <input className={\"btn-add-ingredient\"} type={\"button\"} value={\"Add\"} style={{marginTop: \"10px\"}}\n                   onClick={handleIngredientList}/>\n\n            <ul className={\"list-group\"} ref={register} style={{marginTop: \"20px\", border: \"none\"}}>\n                {ingredientList.map((ingredient, index) => {\n                    return (\n                        <li className={\"list-group-item\"} key={index} style={{border: \"none\"}}>\n                            <div className={\"row\"}>\n                                <div className={\"col\"}>\n                                    {ingredient.name} ( {ingredient.amount} {ingredient.unit} )\n                                </div>\n                                <div className={\"col\"}>\n                                    <button className={\"btn-ingredients-list\"} onClick={handleRemoveIngredientItem}>\n                                        Remove\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n\n            <label htmlFor={\"steps\"}>Steps</label>\n            <textarea className={\"form-control\"} name={\"steps\"} rows={\"5\"} defaultValue={currentRecipe.steps}\n                      ref={register({\n                          required: {value: true, message: \"* Steps is required\"},\n                          minLength: {value: 50, message: \"* Steps are too short\"},\n                      })}/>\n            {errors.steps && <p>{errors.steps.message}</p>}\n\n            <div className={\"row justify-content-center\"}>\n                <div className={\"col\"}>\n                    <input type={\"submit\"} value={\"save\"}/>\n                </div>\n                <div className={\"col\"}>\n                    <input type={\"reset\"} value={\"reset\"}/>\n                </div>\n            </div>\n\n        </form>\n    )\n}\n\nexport default RecipeUpdate;","/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/IngredientNew.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"78","replacedBy":"82"},{"ruleId":"80","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":47,"column":8,"nodeType":"86","endLine":47,"endColumn":10,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":33,"column":11,"nodeType":"90","messageId":"91","endLine":33,"endColumn":18},{"ruleId":"84","severity":1,"message":"85","line":53,"column":8,"nodeType":"86","endLine":53,"endColumn":10,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'recipeId.id'. Either include it or remove the dependency array.","ArrayExpression",["95"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"97","fix":"99"},"Update the dependencies array to be: [recipeId.id]",{"range":"100","text":"101"},{"range":"102","text":"101"},[1434,1436],"[recipeId.id]",[1844,1846]]