{"ast":null,"code":"var _jsxFileName = \"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NewRecipe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport './css/NewRecipe.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewRecipe() {\n  _s();\n\n  const ingredient = {\n    id: '',\n    name: ''\n  };\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const [ingredients, setIngredients] = useState([ingredient]);\n  useEffect(() => {\n    getAllIngredients();\n  }, []);\n\n  const getAllIngredients = () => {\n    axios.get(\"http://localhost:8080/api/ingredients\").then(response => {\n      setIngredients(response.data);\n    });\n  };\n\n  const onSubmit = data => {\n    console.log(data);\n    alert(\"Form is submitted\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-recipe\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      name: \"title\",\n      type: \"text\",\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Title is required\"\n        },\n        minLength: {\n          value: 5,\n          message: \"* Title is too short\"\n        },\n        maxLength: {\n          value: 100,\n          message: \"* Title exceeds the maximum characters\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.title.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"meal\",\n          children: \"Meal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"meal\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Meal is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), meals.map((meal, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: meal\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), errors.meal && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.meal.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"difficulty\",\n          children: \"Difficulty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"difficulty\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Difficulty is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), difficulties.map((difficulty, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: difficulty\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), errors.difficulty && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.difficulty.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-label\",\n      htmlFor: \"ingredients\",\n      children: \"Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      name: \"ingredients\",\n      id: \"ingredientDataList\",\n      list: \"ingredientDataListOptions\",\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Ingredients are required\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"ingredientDataListOptions\",\n      children: ingredients.map(ingredient => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          children: ingredient.name\n        }, ingredient.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          name: \"amount\",\n          type: \"number\",\n          ref: register({\n            required: {\n              value: true,\n              message: \"* Amount is required\"\n            },\n            min: {\n              value: 0,\n              message: \"* Amount must not be zero\"\n            },\n            max: {\n              value: 1000000,\n              message: \"* Amount is too big\"\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.amount.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"unit\",\n          children: \"Unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"unit\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Unit is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), units.map((unit, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: unit\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), errors.unit && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.unit.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"Add Ingredient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"steps\",\n      children: \"Steps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"form-control\",\n      name: \"steps\",\n      rows: \"5\",\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Steps must not be empty\"\n        },\n        minLength: {\n          value: 50,\n          message: \"* Steps are too short\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), errors.steps && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.steps.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewRecipe, \"0y2zjl6wzN03iN1n3JCX664emiw=\", false, function () {\n  return [useForm];\n});\n\n_c = NewRecipe;\nexport default NewRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewRecipe\");","map":{"version":3,"sources":["/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NewRecipe.js"],"names":["React","useEffect","useState","useForm","units","meals","difficulties","axios","NewRecipe","ingredient","id","name","register","handleSubmit","errors","ingredients","setIngredients","getAllIngredients","get","then","response","data","onSubmit","console","log","alert","required","value","message","minLength","maxLength","title","pattern","map","meal","index","difficulty","min","max","amount","unit","steps"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport './css/NewRecipe.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\n\n\nfunction NewRecipe() {\n\n    const ingredient = {id: '', name: ''};\n\n    const {register, handleSubmit, errors} = useForm();\n    const [ingredients, setIngredients] = useState([ingredient]);\n\n    useEffect(() => {\n        getAllIngredients()\n    }, []);\n\n    const getAllIngredients = () => {\n        axios.get(\"http://localhost:8080/api/ingredients\").then(response => {\n            setIngredients(response.data)\n        });\n    };\n\n    const onSubmit = (data) => {\n        console.log(data);\n        alert(\"Form is submitted\");\n    };\n\n    return (\n        <form className={\"form-recipe\"} onSubmit={handleSubmit(onSubmit)}>\n\n            <label htmlFor={\"title\"}>Title</label>\n            <input className={\"form-control\"} name={\"title\"} type={\"text\"}\n                   ref={register({\n                       required: {value: true, message: \"* Title is required\"},\n                       minLength: {value: 5, message: \"* Title is too short\"},\n                       maxLength: {value: 100, message: \"* Title exceeds the maximum characters\"}\n                   })}/>\n            {errors.title && <p>{errors.title.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"meal\"}>Meal</label>\n                    <select className={\"form-select\"} name={\"meal\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Meal is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {meals.map((meal, index) => {\n                            return (<option key={index}>{meal}</option>)\n                        })}\n                    </select>\n                    {errors.meal && <p>{errors.meal.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"difficulty\"}>Difficulty</label>\n                    <select className={\"form-select\"} name={\"difficulty\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Difficulty is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {difficulties.map((difficulty, index) => {\n                            return (<option key={index}>{difficulty}</option>)\n                        })}\n                    </select>\n                    {errors.difficulty && <p>{errors.difficulty.message}</p>}\n                </div>\n            </div>\n\n            <label className={\"form-label\"} htmlFor={\"ingredients\"}>Ingredients</label>\n            <input className={\"form-control\"} name={\"ingredients\"}\n                   id={\"ingredientDataList\"} list={\"ingredientDataListOptions\"}\n                   ref={register({\n                       required: {value: true, message: \"* Ingredients are required\"}\n                   })}/>\n            <datalist id={\"ingredientDataListOptions\"}>\n                {ingredients.map(ingredient => {\n                    return (<option key={ingredient.id}>{ingredient.name}</option>)\n                })}\n            </datalist>\n            \n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"amount\"}>Amount</label>\n                    <input className={\"form-control\"} name={\"amount\"} type={\"number\"}\n                           ref={register({\n                               required: {value: true, message: \"* Amount is required\"},\n                               min: {value: 0, message: \"* Amount must not be zero\"},\n                               max: {value: 1000000, message: \"* Amount is too big\"}\n                           })}/>\n                    {errors.amount && <p>{errors.amount.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"unit\"}>Unit</label>\n                    <select className={\"form-select\"} name={\"unit\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Unit is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {units.map((unit, index) => {\n                            return (<option key={index}>{unit}</option>)\n                        })}\n                    </select>\n                    {errors.unit && <p>{errors.unit.message}</p>}\n                </div>\n            </div>\n\n            <input type={\"button\"} value={\"Add Ingredient\"}/>\n\n            <label htmlFor={\"steps\"}>Steps</label>\n            <textarea className={\"form-control\"} name={\"steps\"} rows={\"5\"}\n                      ref={register({\n                          required: {value: true, message: \"* Steps must not be empty\"},\n                          minLength: {value: 50, message: \"* Steps are too short\"},\n                      })}/>\n            {errors.steps && <p>{errors.steps.message}</p>}\n            <input type={\"submit\"}/>\n\n        </form>\n    )\n}\n\nexport default NewRecipe;"]},"metadata":{},"sourceType":"module"}