{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.0-beta2): dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\nconst mapData = (() => {\n  const storeData = {};\n  let id = 1;\n  return {\n    set(element, key, data) {\n      if (typeof element.bsKey === 'undefined') {\n        element.bsKey = {\n          key,\n          id\n        };\n        id++;\n      }\n\n      storeData[element.bsKey.id] = data;\n    },\n\n    get(element, key) {\n      if (!element || typeof element.bsKey === 'undefined') {\n        return null;\n      }\n\n      const keyProperties = element.bsKey;\n\n      if (keyProperties.key === key) {\n        return storeData[keyProperties.id];\n      }\n\n      return null;\n    },\n\n    delete(element, key) {\n      if (typeof element.bsKey === 'undefined') {\n        return;\n      }\n\n      const keyProperties = element.bsKey;\n\n      if (keyProperties.key === key) {\n        delete storeData[keyProperties.id];\n        delete element.bsKey;\n      }\n    }\n\n  };\n})();\n\nconst Data = {\n  setData(instance, key, data) {\n    mapData.set(instance, key, data);\n  },\n\n  getData(instance, key) {\n    return mapData.get(instance, key);\n  },\n\n  removeData(instance, key) {\n    mapData.delete(instance, key);\n  }\n\n};\nexport default Data;","map":{"version":3,"sources":["/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/node_modules/bootstrap/js/src/dom/data.js"],"names":["mapData","storeData","id","set","element","key","data","bsKey","get","keyProperties","delete","Data","setData","instance","getData","removeData"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA,MAAMA,OAAO,GAAG,CAAC,MAAM;AACrB,QAAMC,SAAS,GAAG,EAAlB;AACA,MAAIC,EAAE,GAAG,CAAT;AACA,SAAO;AACLC,IAAAA,GAAG,CAACC,OAAD,EAAUC,GAAV,EAAeC,IAAf,EAAqB;AACtB,UAAI,OAAOF,OAAO,CAACG,KAAf,KAAyB,WAA7B,EAA0C;AACxCH,QAAAA,OAAO,CAACG,KAAR,GAAgB;AACdF,UAAAA,GADc;AAEdH,UAAAA;AAFc,SAAhB;AAIAA,QAAAA,EAAE;AACH;;AAEDD,MAAAA,SAAS,CAACG,OAAO,CAACG,KAAR,CAAcL,EAAf,CAAT,GAA8BI,IAA9B;AACD,KAXI;;AAYLE,IAAAA,GAAG,CAACJ,OAAD,EAAUC,GAAV,EAAe;AAChB,UAAI,CAACD,OAAD,IAAY,OAAOA,OAAO,CAACG,KAAf,KAAyB,WAAzC,EAAsD;AACpD,eAAO,IAAP;AACD;;AAED,YAAME,aAAa,GAAGL,OAAO,CAACG,KAA9B;;AACA,UAAIE,aAAa,CAACJ,GAAd,KAAsBA,GAA1B,EAA+B;AAC7B,eAAOJ,SAAS,CAACQ,aAAa,CAACP,EAAf,CAAhB;AACD;;AAED,aAAO,IAAP;AACD,KAvBI;;AAwBLQ,IAAAA,MAAM,CAACN,OAAD,EAAUC,GAAV,EAAe;AACnB,UAAI,OAAOD,OAAO,CAACG,KAAf,KAAyB,WAA7B,EAA0C;AACxC;AACD;;AAED,YAAME,aAAa,GAAGL,OAAO,CAACG,KAA9B;;AACA,UAAIE,aAAa,CAACJ,GAAd,KAAsBA,GAA1B,EAA+B;AAC7B,eAAOJ,SAAS,CAACQ,aAAa,CAACP,EAAf,CAAhB;AACA,eAAOE,OAAO,CAACG,KAAf;AACD;AACF;;AAlCI,GAAP;AAoCD,CAvCe,GAAhB;;AAyCA,MAAMI,IAAI,GAAG;AACXC,EAAAA,OAAO,CAACC,QAAD,EAAWR,GAAX,EAAgBC,IAAhB,EAAsB;AAC3BN,IAAAA,OAAO,CAACG,GAAR,CAAYU,QAAZ,EAAsBR,GAAtB,EAA2BC,IAA3B;AACD,GAHU;;AAIXQ,EAAAA,OAAO,CAACD,QAAD,EAAWR,GAAX,EAAgB;AACrB,WAAOL,OAAO,CAACQ,GAAR,CAAYK,QAAZ,EAAsBR,GAAtB,CAAP;AACD,GANU;;AAOXU,EAAAA,UAAU,CAACF,QAAD,EAAWR,GAAX,EAAgB;AACxBL,IAAAA,OAAO,CAACU,MAAR,CAAeG,QAAf,EAAyBR,GAAzB;AACD;;AATU,CAAb;AAYA,eAAeM,IAAf","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.0-beta2): dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst mapData = (() => {\n  const storeData = {}\n  let id = 1\n  return {\n    set(element, key, data) {\n      if (typeof element.bsKey === 'undefined') {\n        element.bsKey = {\n          key,\n          id\n        }\n        id++\n      }\n\n      storeData[element.bsKey.id] = data\n    },\n    get(element, key) {\n      if (!element || typeof element.bsKey === 'undefined') {\n        return null\n      }\n\n      const keyProperties = element.bsKey\n      if (keyProperties.key === key) {\n        return storeData[keyProperties.id]\n      }\n\n      return null\n    },\n    delete(element, key) {\n      if (typeof element.bsKey === 'undefined') {\n        return\n      }\n\n      const keyProperties = element.bsKey\n      if (keyProperties.key === key) {\n        delete storeData[keyProperties.id]\n        delete element.bsKey\n      }\n    }\n  }\n})()\n\nconst Data = {\n  setData(instance, key, data) {\n    mapData.set(instance, key, data)\n  },\n  getData(instance, key) {\n    return mapData.get(instance, key)\n  },\n  removeData(instance, key) {\n    mapData.delete(instance, key)\n  }\n}\n\nexport default Data\n"]},"metadata":{},"sourceType":"module"}