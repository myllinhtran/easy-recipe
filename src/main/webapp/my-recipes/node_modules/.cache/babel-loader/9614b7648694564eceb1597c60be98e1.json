{"ast":null,"code":"var _jsxFileName = \"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/IngredientNew.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction IngredientNew() {\n  _s();\n\n  const initialState = {\n    id: \"\",\n    name: \"\"\n  };\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const [ingredient, setIngredient] = useState(initialState);\n  const [ingredients, setIngredients] = useState();\n  useEffect(() => {\n    axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\").then(response => {\n      setIngredients(response.data);\n    }).catch(error => console.log(error));\n  }, []);\n\n  const handleOnChange = event => {\n    const newIngredient = event.target.value;\n\n    if (ingredients.some(ingredient => ingredient.name === newIngredient.name)) {\n      alert(\"Ingredient already exists!\");\n    } else {\n      setIngredient(newIngredient);\n    }\n  };\n\n  const onSubmit = data => {\n    const ingredient = {\n      name: data.name\n    };\n    axios.post(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\", ingredient).then(response => console.log(response.data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-ingredient\",\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"ingredient\",\n        children: \"Ingredient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        name: \"ingredient\",\n        type: \"text\",\n        placeholder: \"Please add an ingredient...\",\n        onChange: handleOnChange,\n        ref: register({\n          required: {\n            value: true,\n            message: \"* Name is required.\"\n          },\n          minLength: {\n            value: 3,\n            message: \"* Name is too short.\"\n          },\n          maxLength: {\n            value: 20,\n            message: \"* Name is too long.\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), errors.ingredient && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.ingredient.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"btn-new-ingredient\",\n        type: \"submit\",\n        value: \"Add New Ingredient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(IngredientNew, \"HNas1tKAiBHRxSapD7wCZQ54VxI=\", false, function () {\n  return [useForm];\n});\n\n_c = IngredientNew;\nexport default IngredientNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientNew\");","map":{"version":3,"sources":["/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/IngredientNew.js"],"names":["React","useEffect","useState","useForm","axios","IngredientNew","initialState","id","name","register","handleSubmit","errors","ingredient","setIngredient","ingredients","setIngredients","get","then","response","data","catch","error","console","log","handleOnChange","event","newIngredient","target","value","some","alert","onSubmit","post","required","message","minLength","maxLength"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport axios from \"axios\";\n\n\nfunction IngredientNew() {\n\n    const initialState = {\n        id: \"\",\n        name: \"\"\n    };\n    const {register, handleSubmit, errors} = useForm();\n    const [ingredient, setIngredient] = useState(initialState);\n    const [ingredients, setIngredients] = useState();\n\n    useEffect(() => {\n        axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\")\n            .then(response => {setIngredients(response.data)})\n            .catch(error => console.log(error));\n    }, []);\n\n    const handleOnChange = (event) => {\n        const newIngredient = event.target.value;\n        if (ingredients.some(ingredient => ingredient.name === newIngredient.name)) {\n            alert(\"Ingredient already exists!\")\n        } else {\n            setIngredient(newIngredient);\n        }\n    };\n\n    const onSubmit = (data) => {\n        const ingredient = {\n            name: data.name\n        };\n\n        axios.post(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\", ingredient)\n            .then(response => console.log(response.data));\n    };\n\n    return (\n        <div className={\"container\"}>\n            <form className={\"form-ingredient\"} onSubmit={handleSubmit(onSubmit)}>\n                <label htmlFor={\"ingredient\"}>Ingredient</label>\n                <input className={\"form-control\"} name={\"ingredient\"}\n                       type={\"text\"} placeholder={\"Please add an ingredient...\"}\n                       onChange={handleOnChange}\n                       ref={register({\n                           required: {value: true, message: \"* Name is required.\"},\n                           minLength: {value: 3, message: \"* Name is too short.\"},\n                           maxLength: {value: 20, message: \"* Name is too long.\"}\n                       })}\n                />\n                {errors.ingredient && <p>{errors.ingredient.message}</p>}\n\n                <input className={\"btn-new-ingredient\"} type={\"submit\"} value={\"Add New Ingredient\"}/>\n            </form>\n        </div>\n    )\n}\n\nexport default IngredientNew;\n\n"]},"metadata":{},"sourceType":"module"}