{"ast":null,"code":"var _jsxFileName = \"/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/components/Recipe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport { Controller, useForm } from 'react-hook-form';\nimport './css/Recipe.css';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Recipe({\n  validate\n}) {\n  _s();\n\n  const units = [\"unit\", \"g\", \"kg\", \"l\", \"ml\"];\n  const ingredient = {\n    id: '',\n    name: ''\n  };\n  const {\n    control,\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const [ingredients, setIngredients] = useState([ingredient]);\n  const [ingredientId, setIngredientId] = useState(0);\n  const [ingredientName, setIngredientName] = useState('');\n  const [ingredientAmount, setIngredientAmount] = useState('');\n  const [ingredientUnit, setIngredientUnit] = useState('');\n  const [ingredientList, setIngredientList] = useState([]);\n  useEffect(() => {\n    getAllIngredients();\n  }, []);\n\n  function getAllIngredients() {\n    axios.get(\"http://localhost:8080/api/ingredients\").then(response => {\n      console.log(response.data);\n      setIngredients(response.data);\n    });\n  }\n\n  function handleOnChangeIngredient(event) {\n    const ingredientName = event.target.value;\n    setIngredientName(ingredientName);\n    let ingredientId = ingredients.find(ingredient => ingredient.name === ingredientName);\n    setIngredientId(ingredientId.id);\n  }\n\n  function handleOnChangeAmount(event) {\n    const ingredientAmount = event.target.value;\n    setIngredientAmount(ingredientAmount);\n  }\n\n  function handleAddedIngredient() {\n    if (ingredientAmount === \"\") {\n      let message = \"Please pick an amount needed\";\n      console.log(message);\n    }\n\n    const ingredientDetail = {\n      'id': ingredientId,\n      'name': ingredientName,\n      'amount': ingredientAmount,\n      'unit': ingredientUnit\n    };\n    console.log(ingredientDetail);\n    return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n  }\n\n  function onSubmit(data) {\n    const recipe = {\n      title: data.title,\n      meal: data.meal,\n      difficulty: data.difficulty,\n      steps: data.steps,\n      ingredientSet: ingredientList\n    };\n    console.log(recipe);\n    axios.post(\"http://localhost:8080/api/recipes\", recipe).then(response => {\n      console.log(response.data);\n    }).catch(error => console.log(error)).then(refreshPage);\n  }\n\n  function refreshPage() {\n    window.location.reload();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-recipe\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-recipe-head\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        name: \"title\",\n        ref: register({\n          required: \"Please give a title for your recipe\",\n          maxLength: {\n            value: 50,\n            message: \"Your title has exceeded the maximum length\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.title.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"meal\",\n            children: \"Meal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"meal\",\n            control: control,\n            defaultValue: \"\",\n            rules: {\n              required: true\n            },\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(Select, { ...field,\n              options: [{\n                value: \"Breakfast\",\n                label: \"Breakfast\"\n              }, {\n                value: \"Lunch\",\n                label: \"Lunch\"\n              }, {\n                value: \"Dinner\",\n                label: \"Dinner\"\n              }]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), errors.meal && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Meal is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"difficulty\",\n            children: \"Difficulty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"difficulty\",\n            control: control,\n            defaultValue: \"\",\n            rules: {\n              required: true\n            },\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(Select, { ...field,\n              options: [{\n                value: \"Easy\",\n                label: \"Easy\"\n              }, {\n                value: \"Medium\",\n                label: \"Medium\"\n              }, {\n                value: \"Hard\",\n                label: \"Hard\"\n              }]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), errors.difficulty && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Difficulty is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"ingredients\",\n        children: \"Ingredients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"ingredients\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          required: true\n        },\n        render: ({\n          field\n        }) => /*#__PURE__*/_jsxDEV(Select, { ...field\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 42\n        }, this),\n        options: {\n          ingredients\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            name: \"amount\",\n            onChange: handleOnChangeAmount,\n            ref: register({\n              required: true\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please add the amount needed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Unit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            name: \"unit\",\n            id: \"unitDataList\",\n            list: \"unitDatalistOptions\",\n            onChange: e => setIngredientUnit(e.target.value),\n            ref: register({\n              required: true\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n            id: \"unitDatalistOptions\",\n            children: units.map((unit, index) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: unit\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this), errors.unit && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please choose a unit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"btn btn-primary\",\n          type: \"button\",\n          value: \"Add\",\n          onClick: handleAddedIngredient\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group list-group-flush\",\n          ref: register,\n          children: ingredientList.map((ingredient, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"list-group-item\",\n              children: [ingredient.name, \" - \", ingredient.amount, \" \", ingredient.unit]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-recipe-bottom\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Steps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"form-control\",\n        name: \"steps\",\n        rows: \"8\",\n        ref: register({\n          required: \"Please add the instruction for your recipe\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), errors.steps && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.steps.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Recipe, \"xh4KiD4OuwT3oY2x26pPeUGnrhc=\", false, function () {\n  return [useForm];\n});\n\n_c = Recipe;\nexport default Recipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recipe\");","map":{"version":3,"sources":["/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/components/Recipe.js"],"names":["React","useEffect","useState","Select","Controller","useForm","axios","Recipe","validate","units","ingredient","id","name","control","register","handleSubmit","errors","ingredients","setIngredients","ingredientId","setIngredientId","ingredientName","setIngredientName","ingredientAmount","setIngredientAmount","ingredientUnit","setIngredientUnit","ingredientList","setIngredientList","getAllIngredients","get","then","response","console","log","data","handleOnChangeIngredient","event","target","value","find","handleOnChangeAmount","handleAddedIngredient","message","ingredientDetail","onSubmit","recipe","title","meal","difficulty","steps","ingredientSet","post","catch","error","refreshPage","window","location","reload","required","maxLength","field","label","amount","e","map","unit","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport Select from \"react-select\";\nimport {Controller, useForm} from 'react-hook-form';\nimport './css/Recipe.css';\nimport axios from \"axios\";\n\n\nfunction Recipe({validate}) {\n\n    const units = [\n        \"unit\",\n        \"g\",\n        \"kg\",\n        \"l\",\n        \"ml\"\n    ];\n    const ingredient = {\n        id: '',\n        name: ''\n    };\n\n    const {control, register, handleSubmit, errors} = useForm();\n\n    const [ingredients, setIngredients] = useState([ingredient]);\n    const [ingredientId, setIngredientId] = useState(0);\n    const [ingredientName, setIngredientName] = useState('');\n    const [ingredientAmount, setIngredientAmount] = useState('');\n    const [ingredientUnit, setIngredientUnit] = useState('');\n    const [ingredientList, setIngredientList] = useState([]);\n\n\n    useEffect(() => {\n        getAllIngredients();\n    }, []);\n\n    function getAllIngredients() {\n        axios.get(\"http://localhost:8080/api/ingredients\")\n            .then(response => {\n                console.log(response.data);\n                setIngredients(response.data);\n            });\n    }\n\n    function handleOnChangeIngredient(event) {\n        const ingredientName = event.target.value;\n        setIngredientName(ingredientName);\n\n        let ingredientId = ingredients.find((ingredient) => ingredient.name === ingredientName);\n        setIngredientId(ingredientId.id);\n    }\n\n    function handleOnChangeAmount(event) {\n        const ingredientAmount = event.target.value;\n        setIngredientAmount(ingredientAmount);\n    }\n\n    function handleAddedIngredient() {\n\n        if (ingredientAmount === \"\") {\n            let message = \"Please pick an amount needed\";\n            console.log(message);\n        }\n\n        const ingredientDetail = {\n            'id': ingredientId,\n            'name': ingredientName,\n            'amount': ingredientAmount,\n            'unit': ingredientUnit\n        };\n        console.log(ingredientDetail);\n        return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n    }\n\n    function onSubmit(data) {\n        const recipe = {\n            title: data.title,\n            meal: data.meal,\n            difficulty: data.difficulty,\n            steps: data.steps,\n            ingredientSet: ingredientList\n        };\n        console.log(recipe);\n\n        axios.post(\"http://localhost:8080/api/recipes\", recipe)\n            .then(response => {\n                console.log(response.data);\n            }).catch(error => console.log(error))\n            .then(refreshPage);\n    }\n\n    function refreshPage() {\n        window.location.reload();\n    }\n\n    return (\n        <form className={\"form-recipe\"} onSubmit={handleSubmit(onSubmit)}>\n            <div className={\"form-recipe-head\"}>\n                <label htmlFor={\"title\"}>Title</label>\n                <input className={\"form-control\"} name={\"title\"}\n                       ref={register({\n                           required: \"Please give a title for your recipe\",\n                           maxLength: {\n                               value: 50,\n                               message: \"Your title has exceeded the maximum length\"\n                           }\n                       })}/>\n                {errors.title && <p>{errors.title.message}</p>}\n                <div className={\"row\"}>\n                    <div className={\"col\"}>\n                        <label htmlFor={\"meal\"}>Meal</label>\n                        {/*<select className={\"form-select\"} name={\"meal\"}\n                                defaultValue={\"Select\"}\n                                ref={register({\n                                    required: true,\n                                    pattern: {\n                                        message: \"Please select a meal\"\n                                    }\n                                })}>\n                            <option value={\"Select\"} disabled>Select</option>\n                            {meals.map((meal, index) => {\n                                return (\n                                    <option key={index}>{meal}</option>\n                                )\n                            })}\n                        </select>*/}\n                        <Controller\n                            name={\"meal\"}\n                            control={control}\n                            defaultValue=\"\"\n                            rules={{required: true}}\n                            render={({field}) => <Select\n                                {...field}\n                                options={[\n                                    {value: \"Breakfast\", label: \"Breakfast\"},\n                                    {value: \"Lunch\", label: \"Lunch\"},\n                                    {value: \"Dinner\", label: \"Dinner\"}\n                                ]}\n                            />}\n                        />\n                        {errors.meal && <p>Meal is required</p>}\n                    </div>\n                    <div className={\"col\"}>\n                        <label htmlFor={\"difficulty\"}>Difficulty</label>\n                        <Controller\n                            name={\"difficulty\"}\n                            control={control}\n                            defaultValue=\"\"\n                            rules={{required: true}}\n                            render={({field}) => <Select\n                                {...field}\n                                options={[\n                                    {value: \"Easy\", label: \"Easy\"},\n                                    {value: \"Medium\", label: \"Medium\"},\n                                    {value: \"Hard\", label: \"Hard\"}\n                                ]}\n                            />}\n                        />\n                        {errors.difficulty && <p>Difficulty is required</p>}\n                    </div>\n                </div>\n                <label htmlFor={\"ingredients\"}>Ingredients</label>\n                {/*<select className={\"form-select\"} name={\"ingredients\"}\n                        defaultValue={\"Select\"} onChange={handleOnChangeIngredient}\n                        ref={register({\n                            required: true,\n                            pattern: {\n                                message: \"Please select your ingredients\"\n                            }\n                        })}>\n                    <option value={\"Select\"} disabled>Select</option>\n                    {ingredients.map(ingredient => {\n                        return (\n                            <option key={ingredient.id}>{ingredient.name}</option>\n                        );\n                    })}\n                </select>*/}\n                <Controller\n                    name={\"ingredients\"}\n                    control={control}\n                    defaultValue=\"\"\n                    rules={{required: true}}\n                    render={({field}) => <Select\n                        {...field}\n                    />}\n                    options={\n                        {ingredients}\n                    }\n                />\n                <div className={\"row\"}>\n                    <div className={\"col\"}>\n                        <label>Amount</label>\n                        <input className={\"form-control\"} name={\"amount\"}\n                               onChange={handleOnChangeAmount}\n                               ref={register({\n                                   required: true\n                               })}/>\n                        {errors.amount && <p>Please add the amount needed</p>}\n                    </div>\n                    <div className={\"col\"}>\n                        <label>Unit</label>\n                        <input className={\"form-control\"} name={\"unit\"} id={\"unitDataList\"}\n                               list={\"unitDatalistOptions\"} onChange={e => setIngredientUnit(e.target.value)}\n                               ref={register({\n                                   required: true\n                               })}/>\n                        <datalist id={\"unitDatalistOptions\"}>\n                            {units.map((unit, index) => {\n                                return (\n                                    <option key={index} value={unit}/>\n                                )\n                            })}\n                        </datalist>\n                        {errors.unit && <p>Please choose a unit</p>}\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <input className={\"btn btn-primary\"} type={\"button\"} value={\"Add\"} onClick={handleAddedIngredient}/>\n                </div>\n                <div className={\"row\"}>\n                    <ul className={\"list-group list-group-flush\"} ref={register}>\n                        {ingredientList.map((ingredient, index) => {\n                            return (\n                                <li className={\"list-group-item\"} key={index}>\n                                    {ingredient.name} - {ingredient.amount} {ingredient.unit}\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n            <div className={\"form-recipe-bottom\"}>\n                <label>Steps</label>\n                <textarea className={\"form-control\"} name={\"steps\"} rows=\"8\" ref={register({\n                    required: \"Please add the instruction for your recipe\"\n                })}/>\n                {errors.steps && <p>{errors.steps.message}</p>}\n                <input type={\"submit\"}/>\n            </div>\n\n        </form>\n    )\n}\n\nexport default Recipe;"]},"metadata":{},"sourceType":"module"}