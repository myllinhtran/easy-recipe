{"ast":null,"code":"var _jsxFileName = \"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NewRecipe.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport './css/NewRecipe.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst units = [\"unit\", \"g\", \"kg\", \"l\", \"ml\"];\n\nfunction NewRecipe() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const onSubmit = data => {\n    console.log(data);\n    alert(\"Form is submitted\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-recipe\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      name: \"title\",\n      type: \"text\",\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Title is required\"\n        },\n        minLength: {\n          value: 5,\n          message: \"* Title is too short\"\n        },\n        maxLength: {\n          value: 100,\n          message: \"* Title exceeds the maximum characters\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.title.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"meal\",\n          children: \"Meal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"meal\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Meal is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Breakfast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Lunch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Dinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), errors.meal && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.meal.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"difficulty\",\n          children: \"Difficulty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"difficulty\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Difficulty is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Easy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Hard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), errors.difficulty && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.difficulty.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"ingredients\",\n      children: \"Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      name: \"ingredients\",\n      id: \"ingredientDataList\",\n      list: \"ingredientDataListOptions\",\n      ref: register({\n        required: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"ingredientDataListOptions\",\n      children: /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          name: \"amount\",\n          type: \"number\",\n          ref: register({\n            required: {\n              value: true,\n              message: \"* Amount is required\"\n            },\n            min: {\n              value: 0,\n              message: \"* Amount must not be zero\"\n            },\n            max: {\n              value: 1000000,\n              message: \"* Amount is too big\"\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.amount.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"unit\",\n          children: \"Unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"unit\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Unit is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), units.map((unit, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: unit\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), errors.unit && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.unit.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"Add Ingredient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"steps\",\n      children: \"Steps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"form-control\",\n      name: \"steps\",\n      rows: \"5\",\n      ref: register({\n        required: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewRecipe, \"bEVAii9oMzhW3ESoVlJ5HG28YG8=\", false, function () {\n  return [useForm];\n});\n\n_c = NewRecipe;\nexport default NewRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewRecipe\");","map":{"version":3,"sources":["/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NewRecipe.js"],"names":["React","useForm","units","NewRecipe","register","handleSubmit","errors","onSubmit","data","console","log","alert","required","value","message","minLength","maxLength","title","pattern","meal","difficulty","min","max","amount","map","unit","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useForm} from 'react-hook-form';\nimport './css/NewRecipe.css';\n\n\nconst units = [\n    \"unit\",\n    \"g\",\n    \"kg\",\n    \"l\",\n    \"ml\"\n];\n\n\nfunction NewRecipe() {\n\n    const {register, handleSubmit, errors} = useForm();\n\n    const onSubmit = (data) => {\n        console.log(data);\n        alert(\"Form is submitted\");\n    };\n\n    return (\n        <form className={\"form-recipe\"} onSubmit={handleSubmit(onSubmit)}>\n\n            <label htmlFor={\"title\"}>Title</label>\n            <input className={\"form-control\"} name={\"title\"} type={\"text\"}\n                   ref={register({\n                       required: {value: true, message: \"* Title is required\"},\n                       minLength: {value: 5, message: \"* Title is too short\"},\n                       maxLength: {value: 100, message: \"* Title exceeds the maximum characters\"}\n                   })}/>\n            {errors.title && <p>{errors.title.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"meal\"}>Meal</label>\n                    <select className={\"form-select\"} name={\"meal\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Meal is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        <option>Breakfast</option>\n                        <option>Lunch</option>\n                        <option>Dinner</option>\n                    </select>\n                    {errors.meal && <p>{errors.meal.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"difficulty\"}>Difficulty</label>\n                    <select className={\"form-select\"} name={\"difficulty\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Difficulty is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        <option>Easy</option>\n                        <option>Medium</option>\n                        <option>Hard</option>\n                    </select>\n                    {errors.difficulty && <p>{errors.difficulty.message}</p>}\n                </div>\n            </div>\n\n            <label htmlFor={\"ingredients\"}>Ingredients</label>\n            <input className={\"form-control\"} name={\"ingredients\"}\n                   id={\"ingredientDataList\"} list={\"ingredientDataListOptions\"} ref={register({required: true})}/>\n            <datalist id={\"ingredientDataListOptions\"}>\n                <option>Default</option>\n            </datalist>\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"amount\"}>Amount</label>\n                    <input className={\"form-control\"} name={\"amount\"} type={\"number\"}\n                           ref={register({\n                               required: {value: true, message: \"* Amount is required\"},\n                               min: {value: 0, message: \"* Amount must not be zero\"},\n                               max: {value: 1000000, message: \"* Amount is too big\"}\n                           })}/>\n                    {errors.amount && <p>{errors.amount.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"unit\"}>Unit</label>\n                    <select className={\"form-select\"} name={\"unit\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Unit is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {units.map((unit, index) => {\n                            return (<option key={index}>{unit}</option>)\n                        })}\n                    </select>\n                    {errors.unit && <p>{errors.unit.message}</p>}\n                </div>\n            </div>\n\n            <input type={\"button\"} value={\"Add Ingredient\"}/>\n\n            <label htmlFor={\"steps\"}>Steps</label>\n            <textarea className={\"form-control\"} name={\"steps\"} rows={\"5\"} ref={register({required: true})}/>\n\n            <input type={\"submit\"}/>\n        </form>\n    )\n}\n\nexport default NewRecipe;"]},"metadata":{},"sourceType":"module"}