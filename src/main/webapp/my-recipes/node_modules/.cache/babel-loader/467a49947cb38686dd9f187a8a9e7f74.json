{"ast":null,"code":"var _jsxFileName = \"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeUpdate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useParams, useHistory } from \"react-router-dom\";\nimport './css/RecipeUpdate.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RecipeUpdate() {\n  _s();\n\n  const recipe = {\n    title: '',\n    meal: '',\n    difficulty: '',\n    steps: '',\n    ingredientSet: ''\n  };\n  const recipeId = useParams();\n  const ingredient = {\n    id: '',\n    name: ''\n  };\n  const [currentRecipe, setCurrentRecipe] = useState(recipe);\n  const [ingredientId, setIngredientId] = useState(0);\n  const [ingredientName, setIngredientName] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [unit, setUnit] = useState('');\n  const [ingredients, setIngredients] = useState([ingredient]);\n  const [ingredientList, setIngredientList] = useState([]);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const history = useHistory();\n  useEffect(() => {\n    axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/recipes/\" + recipeId.id).then(response => {\n      console.log(response.data);\n      setCurrentRecipe({\n        title: response.data.title,\n        meal: response.data.meal,\n        difficulty: response.data.difficulty,\n        steps: response.data.steps\n      });\n      setIngredientList(response.data.ingredientSet);\n    }).catch(error => console.log(error));\n    axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\").then(response => {\n      setIngredients(response.data);\n    }).catch(error => console.log(error));\n  }, []);\n\n  const onSubmit = data => {\n    const recipe = {\n      id: recipeId.id,\n      title: data.title,\n      meal: data.meal,\n      difficulty: data.difficulty,\n      steps: data.steps,\n      ingredientSet: ingredientList\n    };\n    axios.put(\"https://infinite-caverns-36724.herokuapp.com/api/recipes/\" + recipeId.id, recipe).then(response => {\n      console.log(response.data);\n    }).catch(error => console.log(error)); // alert(\"Your recipe has been updated\");\n  };\n\n  const handleOnChangeIngredient = event => {\n    event.preventDefault();\n    const name = event.target.value;\n    setIngredientName(name);\n    let ingredient = ingredients.find(ingredient => ingredient.name === name);\n    setIngredientId(ingredient.id);\n  };\n\n  const handleIngredientList = event => {\n    event.preventDefault();\n    const ingredientDetail = {\n      'id': ingredientId,\n      'name': ingredientName,\n      'amount': amount,\n      'unit': unit\n    };\n\n    if (ingredientId !== 0 && ingredientName !== \"\" && amount !== 0 && unit !== \"\") {\n      if (ingredientList.some(ingredient => ingredient.name === ingredientDetail.name)) {\n        alert(\"Ingredient already exists!\");\n      } else {\n        console.log(ingredientDetail);\n        return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n      }\n    }\n  };\n\n  const handleRemoveIngredientItem = event => {\n    event.preventDefault();\n    let array = [...ingredientList];\n    let index = array.indexOf(event.target.value);\n    array.splice(index, 1);\n    setIngredientList(array);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-recipe\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      name: \"title\",\n      type: \"text\",\n      defaultValue: currentRecipe.title,\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Title is required\"\n        },\n        minLength: {\n          value: 5,\n          message: \"* Title is too short\"\n        },\n        maxLength: {\n          value: 100,\n          message: \"* Title exceeds the maximum characters\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.title.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"meal\",\n          children: \"Meal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"meal\",\n          defaultValue: currentRecipe.meal,\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Meal is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), meals.map((meal, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: meal\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), errors.meal && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.meal.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"difficulty\",\n          children: \"Difficulty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"difficulty\",\n          defaultValue: currentRecipe.difficulty,\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Difficulty is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), difficulties.map((difficulty, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: difficulty\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), errors.difficulty && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.difficulty.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"ingredients\",\n      children: \"Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"form-select\",\n      name: \"ingredients\",\n      defaultValue: \"Select...\",\n      onChange: handleOnChangeIngredient,\n      ref: register,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Select...\",\n        disabled: true,\n        children: \"Select...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), ingredients.map(ingredient => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: ingredient.name,\n          children: ingredient.name\n        }, ingredient.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), errors.ingredients && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.ingredients.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          name: \"amount\",\n          type: \"number\",\n          onChange: e => setAmount(e.target.value),\n          ref: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.amount.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"unit\",\n          children: \"Unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"unit\",\n          defaultValue: \"Select...\",\n          onChange: e => setUnit(e.target.value),\n          ref: register,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), units.map((unit, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: unit\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), errors.unit && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.unit.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"btn-add-ingredient\",\n      type: \"button\",\n      value: \"Add\",\n      style: {\n        marginTop: \"10px\"\n      },\n      onClick: handleIngredientList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      ref: register,\n      style: {\n        marginTop: \"20px\",\n        border: \"none\"\n      },\n      children: ingredientList.map((ingredient, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          style: {\n            border: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col\",\n              children: [ingredient.name, \" ( \", ingredient.amount, \" \", ingredient.unit, \" )\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn-ingredients-list\",\n                onClick: handleRemoveIngredientItem,\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"steps\",\n      children: \"Steps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"form-control\",\n      name: \"steps\",\n      rows: \"5\",\n      defaultValue: currentRecipe.steps,\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Steps is required\"\n        },\n        minLength: {\n          value: 50,\n          message: \"* Steps are too short\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), errors.steps && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.steps.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"reset\",\n          value: \"reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RecipeUpdate, \"tgxoA0vLvKmUtOGCRGXN7ihntDo=\", false, function () {\n  return [useParams, useForm, useHistory];\n});\n\n_c = RecipeUpdate;\nexport default RecipeUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeUpdate\");","map":{"version":3,"sources":["/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeUpdate.js"],"names":["React","useEffect","useState","useForm","useParams","useHistory","units","meals","difficulties","axios","RecipeUpdate","recipe","title","meal","difficulty","steps","ingredientSet","recipeId","ingredient","id","name","currentRecipe","setCurrentRecipe","ingredientId","setIngredientId","ingredientName","setIngredientName","amount","setAmount","unit","setUnit","ingredients","setIngredients","ingredientList","setIngredientList","register","handleSubmit","errors","history","get","then","response","console","log","data","catch","error","onSubmit","put","handleOnChangeIngredient","event","preventDefault","target","value","find","handleIngredientList","ingredientDetail","some","alert","handleRemoveIngredientItem","array","index","indexOf","splice","required","message","minLength","maxLength","pattern","map","e","marginTop","border"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport {useParams, useHistory} from \"react-router-dom\";\nimport './css/RecipeUpdate.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\n\n\nfunction RecipeUpdate() {\n\n    const recipe = {\n        title: '',\n        meal: '',\n        difficulty: '',\n        steps: '',\n        ingredientSet: ''\n    };\n    const recipeId = useParams();\n    const ingredient = {id: '', name: ''};\n\n    const [currentRecipe, setCurrentRecipe] = useState(recipe);\n\n    const [ingredientId, setIngredientId] = useState(0);\n    const [ingredientName, setIngredientName] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [unit, setUnit] = useState('');\n    const [ingredients, setIngredients] = useState([ingredient]);\n    const [ingredientList, setIngredientList] = useState([]);\n\n    const {register, handleSubmit, errors} = useForm();\n    const history = useHistory();\n\n    useEffect(() => {\n        axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/recipes/\" + recipeId.id)\n            .then(response => {\n                console.log(response.data);\n                setCurrentRecipe({\n                    title: response.data.title,\n                    meal: response.data.meal,\n                    difficulty: response.data.difficulty,\n                    steps: response.data.steps,\n                });\n                setIngredientList(response.data.ingredientSet);\n            }).catch(error => console.log(error));\n\n        axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\")\n            .then(response => {\n                setIngredients(response.data)\n            })\n            .catch(error => console.log(error));\n    }, []);\n\n    const onSubmit = (data) => {\n        const recipe = {\n            id: recipeId.id,\n            title: data.title,\n            meal: data.meal,\n            difficulty: data.difficulty,\n            steps: data.steps,\n            ingredientSet: ingredientList\n        };\n        axios.put(\"https://infinite-caverns-36724.herokuapp.com/api/recipes/\" + recipeId.id, recipe)\n            .then(response => {\n                console.log(response.data);\n            }).catch(error => console.log(error));\n        // alert(\"Your recipe has been updated\");\n    };\n\n    const handleOnChangeIngredient = (event) => {\n        event.preventDefault();\n        const name = event.target.value;\n        setIngredientName(name);\n        let ingredient = ingredients.find((ingredient) => ingredient.name === name);\n        setIngredientId(ingredient.id);\n    };\n\n    const handleIngredientList = (event) => {\n        event.preventDefault();\n\n        const ingredientDetail = {\n            'id': ingredientId,\n            'name': ingredientName,\n            'amount': amount,\n            'unit': unit\n        };\n\n        if (ingredientId !== 0 && ingredientName !== \"\" && amount !== 0 && unit !== \"\") {\n            if (ingredientList.some(ingredient => ingredient.name === ingredientDetail.name)) {\n                alert(\"Ingredient already exists!\");\n            } else {\n                console.log(ingredientDetail);\n                return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n            }\n        }\n    };\n\n    const handleRemoveIngredientItem = (event) => {\n        event.preventDefault();\n        let array = [...ingredientList];\n        let index = array.indexOf(event.target.value);\n        array.splice(index, 1);\n        setIngredientList(array);\n    };\n\n    return (\n        <form className={\"form-recipe\"} onSubmit={handleSubmit(onSubmit)}>\n\n            <label htmlFor={\"title\"}>Title</label>\n            <input className={\"form-control\"} name={\"title\"} type={\"text\"} defaultValue={currentRecipe.title}\n                   ref={register({\n                       required: {value: true, message: \"* Title is required\"},\n                       minLength: {value: 5, message: \"* Title is too short\"},\n                       maxLength: {value: 100, message: \"* Title exceeds the maximum characters\"}\n                   })}/>\n            {errors.title && <p>{errors.title.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"meal\"}>Meal</label>\n                    <select className={\"form-select\"} name={\"meal\"} defaultValue={currentRecipe.meal}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Meal is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {meals.map((meal, index) => {\n                            return (<option key={index}>{meal}</option>)\n                        })}\n                    </select>\n                    {errors.meal && <p>{errors.meal.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"difficulty\"}>Difficulty</label>\n                    <select className={\"form-select\"} name={\"difficulty\"} defaultValue={currentRecipe.difficulty}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Difficulty is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {difficulties.map((difficulty, index) => {\n                            return (<option key={index}>{difficulty}</option>)\n                        })}\n                    </select>\n                    {errors.difficulty && <p>{errors.difficulty.message}</p>}\n                </div>\n            </div>\n\n            <label htmlFor={\"ingredients\"}>Ingredients</label>\n            <select className={\"form-select\"} name={\"ingredients\"} defaultValue={\"Select...\"}\n                    onChange={handleOnChangeIngredient}\n                    ref={register}>\n                <option value={\"Select...\"} disabled>Select...</option>\n                {ingredients.map(ingredient => {\n                    return (<option key={ingredient.id} value={ingredient.name}>{ingredient.name}</option>)\n                })}\n            </select>\n            {errors.ingredients && <p>{errors.ingredients.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"amount\"}>Amount</label>\n                    <input className={\"form-control\"} name={\"amount\"} type={\"number\"}\n                           onChange={e => setAmount(e.target.value)}\n                           ref={register}/>\n                    {errors.amount && <p>{errors.amount.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"unit\"}>Unit</label>\n                    <select className={\"form-select\"} name={\"unit\"} defaultValue={\"Select...\"}\n                            onChange={e => setUnit(e.target.value)}\n                            ref={register}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {units.map((unit, index) => {\n                            return (<option key={index}>{unit}</option>)\n                        })}\n                    </select>\n                    {errors.unit && <p>{errors.unit.message}</p>}\n                </div>\n            </div>\n\n            <input className={\"btn-add-ingredient\"} type={\"button\"} value={\"Add\"} style={{marginTop: \"10px\"}}\n                   onClick={handleIngredientList}/>\n\n            <ul className={\"list-group\"} ref={register} style={{marginTop: \"20px\", border: \"none\"}}>\n                {ingredientList.map((ingredient, index) => {\n                    return (\n                        <li className={\"list-group-item\"} key={index} style={{border: \"none\"}}>\n                            <div className={\"row\"}>\n                                <div className={\"col\"}>\n                                    {ingredient.name} ( {ingredient.amount} {ingredient.unit} )\n                                </div>\n                                <div className={\"col\"}>\n                                    <button className={\"btn-ingredients-list\"} onClick={handleRemoveIngredientItem}>\n                                        Remove\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n\n            <label htmlFor={\"steps\"}>Steps</label>\n            <textarea className={\"form-control\"} name={\"steps\"} rows={\"5\"} defaultValue={currentRecipe.steps}\n                      ref={register({\n                          required: {value: true, message: \"* Steps is required\"},\n                          minLength: {value: 50, message: \"* Steps are too short\"},\n                      })}/>\n            {errors.steps && <p>{errors.steps.message}</p>}\n\n            <div className={\"row justify-content-center\"}>\n                <div className={\"col\"}>\n                    <input type={\"submit\"} value={\"save\"}/>\n                </div>\n                <div className={\"col\"}>\n                    <input type={\"reset\"} value={\"reset\"}/>\n                </div>\n            </div>\n\n        </form>\n    )\n}\n\nexport default RecipeUpdate;"]},"metadata":{},"sourceType":"module"}