{"ast":null,"code":"var _jsxFileName = \"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NewRecipe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport './css/NewRecipe.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewRecipe() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const ingredient = {\n    id: '',\n    name: ''\n  };\n  const [ingredientId, setIngredientId] = useState(0);\n  const [ingredientName, setIngredientName] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [unit, setUnit] = useState('');\n  const [ingredients, setIngredients] = useState([ingredient]);\n  const [ingredientList, setIngredientList] = useState([]);\n  const [ingredientError, setIngredientError] = useState('');\n  const [amountError, setAmountError] = useState('');\n  const [unitError, setUnitError] = useState('');\n  useEffect(() => {\n    axios.get(\"http://localhost:8080/api/ingredients\").then(response => {\n      setIngredients(response.data);\n    });\n  }, []);\n\n  const onSubmit = data => {\n    console.log(data);\n    alert(\"Form is submitted\");\n  };\n\n  const handleOnChangeIngredient = event => {\n    const name = event.target.value;\n    setIngredientName(name);\n    let ingredient = ingredients.find(ingredient => ingredient.name === name);\n    setIngredientId(ingredient.id);\n  };\n\n  const handleIngredientList = event => {\n    // if (ingredientName === \"\") {\n    //     setIngredientError(\"* Ingredients are required\");\n    // } else setIngredientError(null);\n    // if (amount === 0) {\n    //     setAmountError(\"* Amount is required\");\n    // } else setAmountError(null);\n    // if (unit === \"\") {\n    //     setUnitError(\"* Unit is required\");\n    // } else setUnitError(null);\n    const ingredientDetail = {\n      'id': ingredientId,\n      'name': ingredientName,\n      'amount': amount,\n      'unit': unit\n    };\n    console.log(ingredientDetail);\n\n    if (ingredientId !== 0 && ingredientName !== \"\" && amount !== 0 && unit !== \"\") {\n      return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n    } else alert(\"Missing fields\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-recipe\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      name: \"title\",\n      type: \"text\",\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Title is required\"\n        },\n        minLength: {\n          value: 5,\n          message: \"* Title is too short\"\n        },\n        maxLength: {\n          value: 100,\n          message: \"* Title exceeds the maximum characters\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.title.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"meal\",\n          children: \"Meal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"meal\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Meal is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), meals.map((meal, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: meal\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), errors.meal && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.meal.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"difficulty\",\n          children: \"Difficulty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"difficulty\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Difficulty is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), difficulties.map((difficulty, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: difficulty\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), errors.difficulty && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.difficulty.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-label\",\n      htmlFor: \"ingredients\",\n      children: \"Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"form-select\",\n      name: \"ingredients\",\n      defaultValue: \"Select...\",\n      onChange: handleOnChangeIngredient,\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Ingredients are required\"\n        }\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Select...\",\n        disabled: true,\n        children: \"Select...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), ingredients.map(ingredient => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: ingredient.name,\n          children: ingredient.name\n        }, ingredient.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), errors.ingredients && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.ingredients.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 36\n    }, this), ingredientError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: ingredientError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          name: \"amount\",\n          type: \"number\",\n          onChange: e => setAmount(e.target.value),\n          ref: register({\n            required: {\n              value: true,\n              message: \"* Amount is required\"\n            },\n            min: {\n              value: 0,\n              message: \"* Amount must not be zero\"\n            },\n            max: {\n              value: 1000000,\n              message: \"* Amount is too big\"\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.amount.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 39\n        }, this), amountError && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: amountError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"unit\",\n          children: \"Unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"unit\",\n          defaultValue: \"Select...\",\n          onChange: e => setUnit(e.target.value),\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Unit is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), units.map((unit, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: unit\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), errors.unit && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.unit.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 37\n        }, this), unitError && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: unitError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"Add Ingredient\",\n      onClick: handleIngredientList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), console.log(ingredientList), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"steps\",\n      children: \"Steps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"form-control\",\n      name: \"steps\",\n      rows: \"5\",\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Steps is required\"\n        },\n        minLength: {\n          value: 50,\n          message: \"* Steps are too short\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), errors.steps && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.steps.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewRecipe, \"GR2BIcjWJEui8WUpaOBGbvebh9U=\", false, function () {\n  return [useForm];\n});\n\n_c = NewRecipe;\nexport default NewRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewRecipe\");","map":{"version":3,"sources":["/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/NewRecipe.js"],"names":["React","useEffect","useState","useForm","units","meals","difficulties","axios","Select","NewRecipe","register","handleSubmit","errors","ingredient","id","name","ingredientId","setIngredientId","ingredientName","setIngredientName","amount","setAmount","unit","setUnit","ingredients","setIngredients","ingredientList","setIngredientList","ingredientError","setIngredientError","amountError","setAmountError","unitError","setUnitError","get","then","response","data","onSubmit","console","log","alert","handleOnChangeIngredient","event","target","value","find","handleIngredientList","ingredientDetail","required","message","minLength","maxLength","title","pattern","map","meal","index","difficulty","e","min","max","steps"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport './css/NewRecipe.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\nimport Select from 'react-select';\n\nfunction NewRecipe() {\n\n    const {register, handleSubmit, errors} = useForm();\n\n    const ingredient = {id: '', name: ''};\n    const [ingredientId, setIngredientId] = useState(0);\n    const [ingredientName, setIngredientName] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [unit, setUnit] = useState('');\n    const [ingredients, setIngredients] = useState([ingredient]);\n    const [ingredientList, setIngredientList] = useState([]);\n\n    const [ingredientError, setIngredientError] = useState('');\n    const [amountError, setAmountError] = useState('');\n    const [unitError, setUnitError] = useState('');\n\n    useEffect(() => {\n        axios.get(\"http://localhost:8080/api/ingredients\").then(response => {\n            setIngredients(response.data)\n        });\n    }, []);\n\n    const onSubmit = (data) => {\n        console.log(data);\n        alert(\"Form is submitted\");\n    };\n\n    const handleOnChangeIngredient = (event) => {\n        const name = event.target.value;\n        setIngredientName(name);\n        let ingredient = ingredients.find((ingredient) => ingredient.name === name);\n        setIngredientId(ingredient.id);\n    };\n\n    const handleIngredientList = (event) => {\n        // if (ingredientName === \"\") {\n        //     setIngredientError(\"* Ingredients are required\");\n        // } else setIngredientError(null);\n        // if (amount === 0) {\n        //     setAmountError(\"* Amount is required\");\n        // } else setAmountError(null);\n        // if (unit === \"\") {\n        //     setUnitError(\"* Unit is required\");\n        // } else setUnitError(null);\n\n        const ingredientDetail = {\n            'id': ingredientId,\n            'name': ingredientName,\n            'amount': amount,\n            'unit': unit\n        };\n        console.log(ingredientDetail);\n\n        if (ingredientId !== 0 && ingredientName !== \"\" && amount !== 0 && unit !== \"\") {\n            return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n        } else alert(\"Missing fields\");\n    };\n\n    return (\n        <form className={\"form-recipe\"} onSubmit={handleSubmit(onSubmit)}>\n\n            <label htmlFor={\"title\"}>Title</label>\n            <input className={\"form-control\"} name={\"title\"} type={\"text\"}\n                   ref={register({\n                       required: {value: true, message: \"* Title is required\"},\n                       minLength: {value: 5, message: \"* Title is too short\"},\n                       maxLength: {value: 100, message: \"* Title exceeds the maximum characters\"}\n                   })}/>\n            {errors.title && <p>{errors.title.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"meal\"}>Meal</label>\n                    <select className={\"form-select\"} name={\"meal\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Meal is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {meals.map((meal, index) => {\n                            return (<option key={index}>{meal}</option>)\n                        })}\n                    </select>\n                    {errors.meal && <p>{errors.meal.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"difficulty\"}>Difficulty</label>\n                    <select className={\"form-select\"} name={\"difficulty\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Difficulty is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {difficulties.map((difficulty, index) => {\n                            return (<option key={index}>{difficulty}</option>)\n                        })}\n                    </select>\n                    {errors.difficulty && <p>{errors.difficulty.message}</p>}\n                </div>\n            </div>\n\n            <label className={\"form-label\"} htmlFor={\"ingredients\"}>Ingredients</label>\n            <select className={\"form-select\"} name={\"ingredients\"} defaultValue={\"Select...\"}\n                    onChange={handleOnChangeIngredient}\n                    ref={register({\n                        required: {value: true, message: \"* Ingredients are required\"}\n                    })}>\n                <option value={\"Select...\"} disabled>Select...</option>\n                {ingredients.map(ingredient => {\n                    return (<option key={ingredient.id} value={ingredient.name}>{ingredient.name}</option>)\n                })}\n            </select>\n            {errors.ingredients && <p>{errors.ingredients.message}</p>}\n            {ingredientError && <p>{ingredientError}</p>}\n\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"amount\"}>Amount</label>\n                    <input className={\"form-control\"} name={\"amount\"} type={\"number\"}\n                           onChange={e => setAmount(e.target.value)}\n                           ref={register({\n                               required: {value: true, message: \"* Amount is required\"},\n                               min: {value: 0, message: \"* Amount must not be zero\"},\n                               max: {value: 1000000, message: \"* Amount is too big\"}\n                           })}/>\n                    {errors.amount && <p>{errors.amount.message}</p>}\n                    {amountError && <p>{amountError}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"unit\"}>Unit</label>\n                    <select className={\"form-select\"} name={\"unit\"} defaultValue={\"Select...\"}\n                            onChange={e => setUnit(e.target.value)}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Unit is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {units.map((unit, index) => {\n                            return (<option key={index}>{unit}</option>)\n                        })}\n                    </select>\n                    {errors.unit && <p>{errors.unit.message}</p>}\n                    {unitError && <p>{unitError}</p>}\n                </div>\n            </div>\n\n            <input type={\"button\"} value={\"Add Ingredient\"} onClick={handleIngredientList}/>\n            {console.log(ingredientList)}\n\n            <label htmlFor={\"steps\"}>Steps</label>\n            <textarea className={\"form-control\"} name={\"steps\"} rows={\"5\"}\n                      ref={register({\n                          required: {value: true, message: \"* Steps is required\"},\n                          minLength: {value: 50, message: \"* Steps are too short\"},\n                      })}/>\n            {errors.steps && <p>{errors.steps.message}</p>}\n            <input type={\"submit\"}/>\n\n        </form>\n    )\n}\n\nexport default NewRecipe;"]},"metadata":{},"sourceType":"module"}