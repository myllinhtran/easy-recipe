{"ast":null,"code":"var _jsxFileName = \"/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeNew.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport './css/RecipeNew.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RecipeNew() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const ingredient = {\n    id: '',\n    name: ''\n  };\n  const [ingredientId, setIngredientId] = useState(0);\n  const [ingredientName, setIngredientName] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [unit, setUnit] = useState('');\n  const [ingredients, setIngredients] = useState([ingredient]);\n  const [ingredientList, setIngredientList] = useState([]);\n  useEffect(() => {\n    axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\").then(response => {\n      setIngredients(response.data);\n    }).catch(error => console.log(error));\n  }, []);\n\n  const onSubmit = data => {\n    const recipe = {\n      title: data.title,\n      meal: data.meal,\n      difficulty: data.difficulty,\n      steps: data.steps,\n      ingredientSet: ingredientList\n    };\n    axios.post(\"https://infinite-caverns-36724.herokuapp.com/api/recipes\", recipe).then(response => {\n      console.log(response.data);\n    }).catch(error => console.log(error)).then(refreshPage);\n    alert(\"Your recipe has been saved\");\n  };\n\n  const refreshPage = () => {\n    window.location.reload();\n  };\n\n  const handleOnChangeIngredient = event => {\n    event.preventDefault();\n    const name = event.target.value;\n    setIngredientName(name);\n    let ingredient = ingredients.find(ingredient => ingredient.name === name);\n    setIngredientId(ingredient.id);\n  };\n\n  const handleIngredientList = event => {\n    event.preventDefault();\n    const ingredientDetail = {\n      'id': ingredientId,\n      'name': ingredientName,\n      'amount': amount,\n      'unit': unit\n    };\n\n    if (ingredientId !== 0 && ingredientName !== \"\" && amount !== 0 && unit !== \"\") {\n      if (ingredientList.some(ingredient => ingredient.name === ingredientDetail.name)) {\n        alert(\"Ingredient already exists!\");\n      } else {\n        console.log(ingredientDetail);\n        return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n      }\n    }\n  };\n\n  const handleRemoveIngredientItem = event => {\n    event.preventDefault();\n    let array = [...ingredientList];\n    let index = array.indexOf(event.target.value);\n    array.splice(index, 1);\n    setIngredientList(array);\n  };\n\n  const handleNewIngredient = event => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-recipe\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      name: \"title\",\n      type: \"text\",\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Title is required\"\n        },\n        minLength: {\n          value: 5,\n          message: \"* Title is too short\"\n        },\n        maxLength: {\n          value: 100,\n          message: \"* Title exceeds the maximum characters\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.title.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"meal\",\n          children: \"Meal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"meal\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Meal is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), meals.map((meal, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: meal\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), errors.meal && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.meal.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"difficulty\",\n          children: \"Difficulty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"difficulty\",\n          defaultValue: \"Select...\",\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Difficulty is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), difficulties.map((difficulty, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: difficulty\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), errors.difficulty && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.difficulty.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"ingredients\",\n      children: \"Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"form-select\",\n      name: \"ingredients\",\n      defaultValue: \"Select...\",\n      onChange: handleOnChangeIngredient,\n      ref: register({\n        required: true,\n        pattern: {\n          value: /^(?!Select)/,\n          message: \"* Ingredients is required\"\n        }\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Select...\",\n        disabled: true,\n        children: \"Select...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), ingredients.map(ingredient => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: ingredient.name,\n          children: ingredient.name\n        }, ingredient.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), errors.ingredients && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.ingredients.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          name: \"amount\",\n          type: \"number\",\n          onChange: e => setAmount(e.target.value),\n          ref: register({\n            required: {\n              value: true,\n              message: \"* Amount is required\"\n            },\n            min: {\n              value: 0,\n              message: \"* Amount must not be zero\"\n            },\n            max: {\n              value: 1000000,\n              message: \"* Amount is too big\"\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.amount.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"unit\",\n          children: \"Unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select\",\n          name: \"unit\",\n          defaultValue: \"Select...\",\n          onChange: e => setUnit(e.target.value),\n          ref: register({\n            required: true,\n            pattern: {\n              value: /^(?!Select)/,\n              message: \"* Unit is required\"\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Select...\",\n            disabled: true,\n            children: \"Select...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), units.map((unit, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: unit\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), errors.unit && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.unit.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"btn-add-ingredient\",\n      type: \"button\",\n      value: \"Add\",\n      onClick: handleIngredientList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"btn-new-ingredient\",\n      type: \"button\",\n      value: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      ref: register,\n      style: {\n        marginTop: \"20px\",\n        border: \"none\"\n      },\n      children: ingredientList.map((ingredient, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          style: {\n            border: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col\",\n              children: [ingredient.name, \" ( \", ingredient.amount, \" \", ingredient.unit, \" )\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn-ingredients-list\",\n                onClick: handleRemoveIngredientItem,\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"steps\",\n      children: \"Steps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"form-control\",\n      name: \"steps\",\n      rows: \"5\",\n      ref: register({\n        required: {\n          value: true,\n          message: \"* Steps is required\"\n        },\n        minLength: {\n          value: 50,\n          message: \"* Steps are too short\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), errors.steps && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errors.steps.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RecipeNew, \"fz0eh4fbc3UbgV2kK5L+YStUq78=\", false, function () {\n  return [useForm];\n});\n\n_c = RecipeNew;\nexport default RecipeNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeNew\");","map":{"version":3,"sources":["/Users/Linh/Documents/Programmar/Project/recipe/src/main/webapp/my-recipes/src/components/RecipeNew.js"],"names":["React","useEffect","useState","useForm","units","meals","difficulties","axios","RecipeNew","register","handleSubmit","errors","ingredient","id","name","ingredientId","setIngredientId","ingredientName","setIngredientName","amount","setAmount","unit","setUnit","ingredients","setIngredients","ingredientList","setIngredientList","get","then","response","data","catch","error","console","log","onSubmit","recipe","title","meal","difficulty","steps","ingredientSet","post","refreshPage","alert","window","location","reload","handleOnChangeIngredient","event","preventDefault","target","value","find","handleIngredientList","ingredientDetail","some","handleRemoveIngredientItem","array","index","indexOf","splice","handleNewIngredient","required","message","minLength","maxLength","pattern","map","e","min","max","marginTop","border"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport './css/RecipeNew.css';\nimport units from \"./util/Unit\";\nimport meals from \"./util/Meal\";\nimport difficulties from \"./util/Difficulty\";\nimport axios from \"axios\";\n\n\nfunction RecipeNew() {\n\n    const {register, handleSubmit, errors} = useForm();\n    const ingredient = {id: '', name: ''};\n    const [ingredientId, setIngredientId] = useState(0);\n    const [ingredientName, setIngredientName] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [unit, setUnit] = useState('');\n    const [ingredients, setIngredients] = useState([ingredient]);\n\n    const [ingredientList, setIngredientList] = useState([]);\n\n    useEffect(() => {\n        axios.get(\"https://infinite-caverns-36724.herokuapp.com/api/ingredients\")\n            .then(response => {setIngredients(response.data)})\n            .catch(error => console.log(error));\n    }, []);\n\n    const onSubmit = (data) => {\n        const recipe = {\n            title: data.title,\n            meal: data.meal,\n            difficulty: data.difficulty,\n            steps: data.steps,\n            ingredientSet: ingredientList\n        };\n        axios.post(\"https://infinite-caverns-36724.herokuapp.com/api/recipes\", recipe)\n            .then(response => {\n                console.log(response.data);\n            }).catch(error => console.log(error))\n            .then(refreshPage);\n        alert(\"Your recipe has been saved\");\n    };\n\n    const refreshPage = () => {\n        window.location.reload();\n    };\n\n    const handleOnChangeIngredient = (event) => {\n        event.preventDefault();\n        const name = event.target.value;\n        setIngredientName(name);\n        let ingredient = ingredients.find((ingredient) => ingredient.name === name);\n        setIngredientId(ingredient.id);\n    };\n\n    const handleIngredientList = (event) => {\n        event.preventDefault();\n\n        const ingredientDetail = {\n            'id': ingredientId,\n            'name': ingredientName,\n            'amount': amount,\n            'unit': unit\n        };\n\n        if (ingredientId !== 0 && ingredientName !== \"\" && amount !== 0 && unit !== \"\") {\n            if (ingredientList.some(ingredient => ingredient.name === ingredientDetail.name)) {\n                alert(\"Ingredient already exists!\");\n            } else {\n                console.log(ingredientDetail);\n                return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n            }\n        }\n    };\n\n    const handleRemoveIngredientItem = (event) => {\n        event.preventDefault();\n        let array = [...ingredientList];\n        let index = array.indexOf(event.target.value);\n        array.splice(index, 1);\n        setIngredientList(array);\n    };\n\n    const handleNewIngredient = (event) => {\n        event.preventDefault();\n\n    };\n\n    return (\n        <form className={\"form-recipe\"} onSubmit={handleSubmit(onSubmit)}>\n\n            <label htmlFor={\"title\"}>Title</label>\n            <input className={\"form-control\"} name={\"title\"} type={\"text\"}\n                   ref={register({\n                       required: {value: true, message: \"* Title is required\"},\n                       minLength: {value: 5, message: \"* Title is too short\"},\n                       maxLength: {value: 100, message: \"* Title exceeds the maximum characters\"}\n                   })}/>\n            {errors.title && <p>{errors.title.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"meal\"}>Meal</label>\n                    <select className={\"form-select\"} name={\"meal\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Meal is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {meals.map((meal, index) => {\n                            return (<option key={index}>{meal}</option>)\n                        })}\n                    </select>\n                    {errors.meal && <p>{errors.meal.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"difficulty\"}>Difficulty</label>\n                    <select className={\"form-select\"} name={\"difficulty\"} defaultValue={\"Select...\"}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Difficulty is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {difficulties.map((difficulty, index) => {\n                            return (<option key={index}>{difficulty}</option>)\n                        })}\n                    </select>\n                    {errors.difficulty && <p>{errors.difficulty.message}</p>}\n                </div>\n            </div>\n\n            <label htmlFor={\"ingredients\"}>Ingredients</label>\n            <select className={\"form-select\"} name={\"ingredients\"} defaultValue={\"Select...\"}\n                    onChange={handleOnChangeIngredient}\n                    ref={register({\n                        required: true,\n                        pattern: {value: /^(?!Select)/, message: \"* Ingredients is required\"}\n                    })}>\n                <option value={\"Select...\"} disabled>Select...</option>\n                {ingredients.map(ingredient => {\n                    return (<option key={ingredient.id} value={ingredient.name}>{ingredient.name}</option>)\n                })}\n            </select>\n            {errors.ingredients && <p>{errors.ingredients.message}</p>}\n\n            <div className={\"row\"}>\n                <div className={\"col\"}>\n                    <label htmlFor={\"amount\"}>Amount</label>\n                    <input className={\"form-control\"} name={\"amount\"} type={\"number\"}\n                           onChange={e => setAmount(e.target.value)}\n                           ref={register({\n                               required: {value: true, message: \"* Amount is required\"},\n                               min: {value: 0, message: \"* Amount must not be zero\"},\n                               max: {value: 1000000, message: \"* Amount is too big\"}\n                           })}/>\n                    {errors.amount && <p>{errors.amount.message}</p>}\n                </div>\n                <div className={\"col\"}>\n                    <label htmlFor={\"unit\"}>Unit</label>\n                    <select className={\"form-select\"} name={\"unit\"} defaultValue={\"Select...\"}\n                            onChange={e => setUnit(e.target.value)}\n                            ref={register({\n                                required: true,\n                                pattern: {value: /^(?!Select)/, message: \"* Unit is required\"}\n                            })}>\n                        <option value={\"Select...\"} disabled>Select...</option>\n                        {units.map((unit, index) => {\n                            return (<option key={index}>{unit}</option>)\n                        })}\n                    </select>\n                    {errors.unit && <p>{errors.unit.message}</p>}\n                </div>\n            </div>\n\n            <input className={\"btn-add-ingredient\"} type={\"button\"} value={\"Add\"} onClick={handleIngredientList}/>\n            \n            <input className={\"btn-new-ingredient\"} type={\"button\"} value={\"Add\"}/>\n\n            <ul className={\"list-group\"} ref={register} style={{marginTop: \"20px\", border: \"none\"}}>\n                {ingredientList.map((ingredient, index) => {\n                    return (\n                        <li className={\"list-group-item\"} key={index} style={{border: \"none\"}}>\n                            <div className={\"row\"}>\n                                <div className={\"col\"}>\n                                    {ingredient.name} ( {ingredient.amount} {ingredient.unit} )\n                                </div>\n                                <div className={\"col\"}>\n                                    <button className={\"btn-ingredients-list\"} onClick={handleRemoveIngredientItem}>\n                                        Remove\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n\n            <label htmlFor={\"steps\"}>Steps</label>\n            <textarea className={\"form-control\"} name={\"steps\"} rows={\"5\"}\n                      ref={register({\n                          required: {value: true, message: \"* Steps is required\"},\n                          minLength: {value: 50, message: \"* Steps are too short\"},\n                      })}/>\n            {errors.steps && <p>{errors.steps.message}</p>}\n            <input type={\"submit\"}/>\n\n        </form>\n    )\n}\n\nexport default RecipeNew;"]},"metadata":{},"sourceType":"module"}