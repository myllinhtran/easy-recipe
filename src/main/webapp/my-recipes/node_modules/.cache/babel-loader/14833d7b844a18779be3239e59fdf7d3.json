{"ast":null,"code":"var _jsxFileName = \"/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/components/Recipe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from 'react-hook-form';\nimport Select from 'react-select';\nimport './css/Recipe.css';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Recipe() {\n  _s();\n\n  const units = [\"unit\", \"g\", \"kg\", \"l\", \"ml\"];\n  const meals = [\"Breakfast\", \"Lunch\", \"Dinner\"];\n  const difficulties = [\"Easy\", \"Medium\", \"Hard\"];\n  const ingredient = {\n    id: '',\n    name: ''\n  };\n  const {\n    register,\n    handleSubmit,\n    errors,\n    validate\n  } = useForm();\n  const [ingredients, getIngredients] = useState([ingredient]);\n  const [ingredientId, setIngredientId] = useState(0);\n  const [ingredientName, setIngredientName] = useState('');\n  const [ingredientAmount, setIngredientAmount] = useState('');\n  const [ingredientUnit, setIngredientUnit] = useState('');\n  const [ingredientList, setIngredientList] = useState([]);\n  useEffect(() => {\n    getAllIngredients();\n  }, []);\n\n  function getAllIngredients() {\n    axios.get(\"http://localhost:8080/api/ingredients\").then(response => {\n      getIngredients(response.data);\n    });\n  }\n\n  function handleOnChangeIngredient(event) {\n    const ingredientName = event.target.value;\n    setIngredientName(ingredientName);\n    let ingredientId = ingredients.find(ingredient => ingredient.name === ingredientName);\n    setIngredientId(ingredientId.id);\n  }\n\n  function handleOnChangeAmount(event) {\n    const ingredientAmount = event.target.value;\n    setIngredientAmount(ingredientAmount);\n  }\n\n  function handleAddedIngredient() {\n    if (ingredientAmount === \"\") {\n      let message = \"Please pick an amount needed\";\n      console.log(message);\n    }\n\n    const ingredientDetail = {\n      'id': ingredientId,\n      'name': ingredientName,\n      'amount': ingredientAmount,\n      'unit': ingredientUnit\n    };\n    console.log(ingredientDetail);\n    return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n  }\n\n  function onSubmit(data) {\n    const recipe = {\n      title: data.title,\n      meal: data.meal,\n      difficulty: data.difficulty,\n      steps: data.steps,\n      ingredientSet: ingredientList\n    };\n    console.log(recipe);\n    axios.post(\"http://localhost:8080/api/recipes\", recipe).then(response => {\n      console.log(response.data);\n    }).catch(error => console.log(error)).then(refreshPage);\n  }\n\n  function refreshPage() {\n    window.location.reload();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-recipe\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-recipe-head\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        name: \"title\",\n        ref: register({\n          required: \"Title is needed\",\n          maxLength: {\n            value: 50,\n            message: \"Your title has exceeded the maximum length\"\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.title.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"meal\",\n            children: \"Meal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            defaultValue: \"Select\",\n            name: \"meal\",\n            ref: register({\n              required: true,\n              pattern: {\n                message: \"Please select a meal\"\n              }\n            }),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Select\",\n              disabled: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this), meals.map((meal, index) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                children: meal\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 41\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), errors.meal && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Meal is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"difficulty\",\n            children: \"Difficulty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            defaultValue: \"Select\",\n            name: \"difficulty\",\n            ref: register({\n              required: true\n            }),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Select\",\n              disabled: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 29\n            }, this), difficulties.map((difficulty, index) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                children: difficulty\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 37\n              }, this);\n            }), errors.difficulty && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Difficulty is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 51\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"ingredients\",\n        children: \"Ingredients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select\",\n        name: \"ingredients\",\n        defaultValue: \"Select\",\n        onChange: handleOnChangeIngredient,\n        ref: register({\n          required: true,\n          pattern: {\n            message: \"Please select your ingredients\"\n          }\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Select\",\n          disabled: true,\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), ingredients.map(ingredient => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            children: ingredient.name\n          }, ingredient.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            name: \"amount\",\n            onChange: e => setIngredientUnit(e.target.value),\n            type: \"number\",\n            ref: register({\n              required: true,\n              max: {\n                value: 1,\n                message: \"Please check the amount again\"\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please add the amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Unit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            name: \"unit\",\n            id: \"unitDataList\",\n            list: \"unitDatalistOptions\",\n            onChange: e => setIngredientUnit(e.target.value),\n            ref: register({\n              required: true\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n            id: \"unitDatalistOptions\",\n            children: units.map((unit, index) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: unit\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), errors.unit && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please choose a unit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"btn btn-primary\",\n          type: \"button\",\n          value: \"Add\",\n          onClick: handleAddedIngredient\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group list-group-flush\",\n          ref: register,\n          children: ingredientList.map((ingredient, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"list-group-item\",\n              children: [ingredient.name, \" - \", ingredient.amount, \" \", ingredient.unit]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-recipe-bottom\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Steps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"form-control\",\n        name: \"steps\",\n        rows: \"6\",\n        ref: register({\n          required: \"Please add the instruction for your recipe\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), errors.steps && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.steps.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Recipe, \"xvCjoDQriXZWpjYcrngYr3NOkBo=\", false, function () {\n  return [useForm];\n});\n\n_c = Recipe;\nexport default Recipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recipe\");","map":{"version":3,"sources":["/Users/Linh/Documents/programmar/Project/recipe/src/main/webapp/my-recipes/src/components/Recipe.js"],"names":["React","useEffect","useState","useForm","Select","axios","Recipe","units","meals","difficulties","ingredient","id","name","register","handleSubmit","errors","validate","ingredients","getIngredients","ingredientId","setIngredientId","ingredientName","setIngredientName","ingredientAmount","setIngredientAmount","ingredientUnit","setIngredientUnit","ingredientList","setIngredientList","getAllIngredients","get","then","response","data","handleOnChangeIngredient","event","target","value","find","handleOnChangeAmount","handleAddedIngredient","message","console","log","ingredientDetail","onSubmit","recipe","title","meal","difficulty","steps","ingredientSet","post","catch","error","refreshPage","window","location","reload","required","maxLength","pattern","map","index","e","max","amount","unit"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useForm} from 'react-hook-form';\nimport Select from 'react-select';\nimport './css/Recipe.css';\nimport axios from \"axios\";\n\n\nfunction Recipe() {\n\n    const units = [\n        \"unit\",\n        \"g\",\n        \"kg\",\n        \"l\",\n        \"ml\"\n    ];\n    const meals = [\n        \"Breakfast\",\n        \"Lunch\",\n        \"Dinner\"\n    ];\n    const difficulties = [\n        \"Easy\",\n        \"Medium\",\n        \"Hard\"\n    ];\n    const ingredient = {\n        id: '',\n        name: ''\n    };\n\n    const {register, handleSubmit, errors, validate} = useForm();\n\n    const [ingredients, getIngredients] = useState([ingredient]);\n    const [ingredientId, setIngredientId] = useState(0);\n    const [ingredientName, setIngredientName] = useState('');\n    const [ingredientAmount, setIngredientAmount] = useState('');\n    const [ingredientUnit, setIngredientUnit] = useState('');\n    const [ingredientList, setIngredientList] = useState([]);\n\n\n    useEffect(() => {\n        getAllIngredients();\n    }, []);\n\n    function getAllIngredients() {\n        axios.get(\"http://localhost:8080/api/ingredients\")\n            .then(response => {\n                getIngredients(response.data);\n            });\n    }\n\n    function handleOnChangeIngredient(event) {\n        const ingredientName = event.target.value;\n        setIngredientName(ingredientName);\n\n        let ingredientId = ingredients.find((ingredient) => ingredient.name === ingredientName);\n        setIngredientId(ingredientId.id);\n    }\n\n    function handleOnChangeAmount(event) {\n        const ingredientAmount = event.target.value;\n        setIngredientAmount(ingredientAmount);\n    }\n\n    function handleAddedIngredient() {\n\n        if (ingredientAmount === \"\") {\n            let message = \"Please pick an amount needed\";\n            console.log(message);\n        }\n\n        const ingredientDetail = {\n            'id': ingredientId,\n            'name': ingredientName,\n            'amount': ingredientAmount,\n            'unit': ingredientUnit\n        };\n        console.log(ingredientDetail);\n        return setIngredientList(ingredientList => [...ingredientList, ingredientDetail]);\n    }\n\n    function onSubmit(data) {\n        const recipe = {\n            title: data.title,\n            meal: data.meal,\n            difficulty: data.difficulty,\n            steps: data.steps,\n            ingredientSet: ingredientList\n        };\n        console.log(recipe);\n\n        axios.post(\"http://localhost:8080/api/recipes\", recipe)\n            .then(response => {\n                console.log(response.data);\n            }).catch(error => console.log(error))\n            .then(refreshPage);\n    }\n\n    function refreshPage() {\n        window.location.reload();\n    }\n\n    return (\n        <form className={\"form-recipe\"} onSubmit={handleSubmit(onSubmit)}>\n            <div className={\"form-recipe-head\"}>\n                <label htmlFor={\"title\"}>Title</label>\n                <input className={\"form-control\"}\n                       name={\"title\"}\n                       ref={register({\n                           required: \"Title is needed\",\n                           maxLength: {value: 50, message: \"Your title has exceeded the maximum length\"}\n                       })}/>\n                {errors.title && <p>{errors.title.message}</p>}\n                <div className={\"row\"}>\n                    <div className={\"col\"}>\n                        <label htmlFor={\"meal\"}>Meal</label>\n                        <select className={\"form-select\"}\n                                defaultValue={\"Select\"}\n                                name={\"meal\"}\n                                ref={register({\n                                    required: true,\n                                    pattern: {\n                                        message: \"Please select a meal\"\n                                    }\n                                })}>\n                            <option value={\"Select\"} disabled>Select</option>\n                            {meals.map((meal, index) => {\n                                return (<option key={index}>{meal}</option>)\n                            })}\n                        </select>\n                        {errors.meal && <p>Meal is required</p>}\n                    </div>\n                    <div className={\"col\"}>\n                        <label htmlFor={\"difficulty\"}>Difficulty</label>\n                        <select className={\"form-select\"}\n                                defaultValue={\"Select\"}\n                                name={\"difficulty\"}\n                                ref={register({required: true})}>\n                            <option value={\"Select\"} disabled>Select</option>\n                            {difficulties.map((difficulty, index) => {\n                                return (\n                                    <option key={index}>{difficulty}</option>\n                                )\n                            })}\n                            {errors.difficulty && <p>Difficulty is required</p>}\n                        </select>\n                    </div>\n                </div>\n                <label htmlFor={\"ingredients\"}>Ingredients</label>\n                <select className={\"form-select\"} name={\"ingredients\"}\n                        defaultValue={\"Select\"} onChange={handleOnChangeIngredient}\n                        ref={register({\n                            required: true,\n                            pattern: {\n                                message: \"Please select your ingredients\"\n                            }\n                        })}>\n                    <option value={\"Select\"} disabled>Select</option>\n                    {ingredients.map(ingredient => {\n                        return (\n                            <option key={ingredient.id}>{ingredient.name}</option>\n                        );\n                    })}\n                </select>\n                <div className={\"row\"}>\n                    <div className={\"col\"}>\n                        <label>Amount</label>\n                        <input className={\"form-control\"} name={\"amount\"}\n                               onChange={e => setIngredientUnit(e.target.value)}\n                               type={\"number\"}\n                               ref={register({\n                                   required: true,\n                                   max: {\n                                       value: 1,\n                                       message: \"Please check the amount again\"\n                                   }\n                               })}/>\n                        {errors.amount && <p>Please add the amount</p>}\n                    </div>\n                    <div className={\"col\"}>\n                        <label>Unit</label>\n                        <input className={\"form-control\"} name={\"unit\"} id={\"unitDataList\"}\n                               list={\"unitDatalistOptions\"} onChange={e => setIngredientUnit(e.target.value)}\n                               ref={register({\n                                   required: true\n                               })}/>\n                        <datalist id={\"unitDatalistOptions\"}>\n                            {units.map((unit, index) => {\n                                return (\n                                    <option key={index} value={unit}/>\n                                )\n                            })}\n                        </datalist>\n                        {errors.unit && <p>Please choose a unit</p>}\n                    </div>\n                </div>\n                <div className={\"row\"}>\n                    <input className={\"btn btn-primary\"} type={\"button\"} value={\"Add\"} onClick={handleAddedIngredient}/>\n                </div>\n                <div className={\"row\"}>\n                    <ul className={\"list-group list-group-flush\"} ref={register}>\n                        {ingredientList.map((ingredient, index) => {\n                            return (\n                                <li className={\"list-group-item\"} key={index}>\n                                    {ingredient.name} - {ingredient.amount} {ingredient.unit}\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n            <div className={\"form-recipe-bottom\"}>\n                <label>Steps</label>\n                <textarea className={\"form-control\"} name={\"steps\"} rows=\"6\" ref={register({\n                    required: \"Please add the instruction for your recipe\"\n                })}/>\n                {errors.steps && <p>{errors.steps.message}</p>}\n                <input type={\"submit\"}/>\n            </div>\n\n        </form>\n    )\n}\n\nexport default Recipe;"]},"metadata":{},"sourceType":"module"}